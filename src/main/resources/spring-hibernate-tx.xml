<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 添加数据源信息 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 添加hibernate.cfg.xml文件 -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<!-- 扫描hibernate注解配置的entity -->
		<property name="packagesToScan" value="com.xiaoy.base.entities" />
	</bean>

	<!-- 声明式事务 -->
	<!-- 1.hibernate事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!--2. 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />

			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />

			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!--3. 配置切点 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.xiaoy..service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 系统操作日志 -->
	<aop:config>
		<!-- 保存操作的切点 -->
		<aop:pointcut expression="execution(* com.xiaoy..service..*Impl.save*(..))" id="saveHandleLogPointcut" />
		<!-- 更新操作的切点 -->
		<aop:pointcut expression="execution(* com.xiaoy..service..*Impl.update*(..))" id="updateHandleLogPointcut" />
		<!-- 删除操作的切点 -->
		<aop:pointcut expression="execution(* com.xiaoy..service..*Impl.delete*(..))" id="deleteHandleLogPointcut" />
		<!-- 切面： 将哪个对象中的哪个方法，织入到哪个切入点 -->
		<aop:aspect id="logAsp" ref="logServiceImpl">
			<!-- 前置通知 <aop:before method="log" pointcut-ref="logPointcut" />  -->
			<!-- 有返回值的前置通知 
			<aop:after-returning method="logArgAndReturn" returning="returnObj" pointcut-ref="logPointcut" />
			-->
			<aop:after method="logArgSave" pointcut-ref="saveHandleLogPointcut" />
			<aop:after method="logArgUpdate" pointcut-ref="updateHandleLogPointcut" />
			<aop:after method="logArgDelete" pointcut-ref="deleteHandleLogPointcut" />
		</aop:aspect>
	</aop:config>
</beans>





